#[derive(Copy, Clone, PartialEq)]
pub enum TokenType {
    Plus,
    Minus,
    Times,
    Divide,
    Mod,
    PlusEquals,
    MinusEquals,
    TimesEquals,
    DivideEquals,
    ModEquals,
    Not,
    Or,
    GreaterThan,
    GreaterThanEqual,
    LessThan,
    LessThanEqual,
    NotEqual,
    Number,
    Identifier,
    Period,
    Rparen,
    Equal,
    Lparen,
    Lbracket,
    Rbracket,
    Lbrace,
    Rbrace,
    Lambda,
    Num,
    Str,
    String,
    Func,
    Function,
    Bool,
    True,
    False,
    Print,
    Println,
    Void,
    List,
    Dict,
    If,
    In,
    End,
    Newline,
}

impl ToString for TokenType {
    fn to_string(&self) -> String {
        return String::from(match self {
            TokenType::Plus => "Plus",
            TokenType::Minus => "Minus",
            TokenType::Times => "Times",
            TokenType::Divide => "Divide",
            TokenType::Mod => "Mod",
            TokenType::PlusEquals => "PlusEquals",
            TokenType::MinusEquals => "MinusEquals",
            TokenType::TimesEquals => "TimesEquals",
            TokenType::DivideEquals => "DivideEquals",
            TokenType::ModEquals => "ModEquals",
            TokenType::Not => "Not",
            TokenType::Or => "Or",
            TokenType::GreaterThan => "GreaterThan",
            TokenType::GreaterThanEqual => "GreaterThanEqual",
            TokenType::LessThan => "LessThan",
            TokenType::LessThanEqual => "LessThanEqual",
            TokenType::NotEqual => "NotEqual",
            TokenType::Number => "Number",
            TokenType::Identifier => "Identifier",
            TokenType::Period => "Period",
            TokenType::Rparen => "Rparen",
            TokenType::Equal => "Equal",
            TokenType::Rbracket => "Rbracket",
            TokenType::Rbrace => "Rbrace",
            TokenType::Lambda => "Lambda",
            TokenType::Num => "Num",
            TokenType::Str => "Str",
            TokenType::Bool => "Bool",
            TokenType::True => "True",
            TokenType::Println => "Println",
            TokenType::Void => "Void",
            TokenType::If => "If",
            TokenType::In => "In",
            TokenType::Newline => "Newline",
            TokenType::Lparen => "Lparen",
            TokenType::Lbracket => "Lbracket",
            TokenType::Lbrace => "Lbrace",
            TokenType::Func => "Func",
            TokenType::Function => "Function",
            TokenType::False => "False",
            TokenType::Print => "Print",
            TokenType::List => "List",
            TokenType::Dict => "Dict",
            TokenType::End => "End",
            TokenType::String => "String"
        });
    }
}